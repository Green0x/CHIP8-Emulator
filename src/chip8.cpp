#include <vector>
#include <print>
#include <iostream>
#include <algorithm>
#include <fstream>

// 4Kb of RAM
unsigned char memory[4096];

// Program counter
unsigned char pc{};

// Index Register
short I{};

// A Stack for 16 bit addresses
std::vector<short> stack;

// 8 bit Delay Timer
unsigned char dt{};

// 8 bit Sound Timer
unsigned char st{};

// Registers
unsigned char V[16] = {
	0x0, 0x1, 0x2, 0x3,
	0x4, 0x5, 0x6, 0x7,
	0x8, 0x9, 0xA, 0xB,
	0xC, 0xD, 0xE, 0xF
};

// Font
// 1111 Each bit represents either on or off on the screen
// 1001 aka, black or white background
// 1001
// 1001
// 1111
unsigned char font[80] = {
	0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
	0x20, 0x60, 0x20, 0x20, 0x70, // 1
	0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
	0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
	0x90, 0x90, 0xF0, 0x10, 0x10, // 4
	0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
	0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
	0xF0, 0x10, 0x20, 0x40, 0x40, // 7
	0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
	0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
	0xF0, 0x90, 0xF0, 0x90, 0x90, // A
	0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
	0xF0, 0x80, 0x80, 0x80, 0xF0, // C
	0xE0, 0x90, 0x90, 0x90, 0xE0, // D
	0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
	0xF0, 0x80, 0xF0, 0x80, 0x80  // F
};

void initChip8() {
	std::copy(&font[0], &font[80], &memory[0]); // Copy font into memory
	
}

void loadRom(std::string romName) {
	std::ifstream romFile(romName, std::ios::binary);

	if (romFile.is_open())
	{
		romFile.seekg(0, std::ios::end);
		size_t length = romFile.tellg();
		romFile.seekg(0, std::ios::beg);		

		if (length > 0) {
			romFile.read(reinterpret_cast<char*>(&memory[512]), length);
		}

		romFile.close();
	}
	else
	{
		std::println("Unable to open rom file.");
	}
}

int chip8() {
	
	 
	initChip8();

	return 0;
}

